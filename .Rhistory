library(MASS)
summary("MASS")
data(package="MASS")
View(epil)
summary(epil)
str(epil)
dataEpil<-data.frame(epil)
dataEpil
View("dataEpil")
summary(dataEpil)
View(epil)
table(is.null(epil))
table(is.na(epil))
write.table(dataEpil,"C:/Users/Luismi/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.txt",sep="")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
# EJERCICIO 1
install.packages("MASS")
library(MASS)
MASS
summary("MASS")
MASS
```{r}
install.packages("rmarkdown")
install.packages("MASS")
summary("MASS")
data(package="MASS")
summary(epil)
str(epil)
dataEpil<-data.frame(epil)
dataEpil
View("dataEpil")
summary(dataEpil)
table(is.null(epil))
table(is.na(epil))
write.table(dataEpil,"C:/Users/Luismi/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.txt",sep="")
write.csv(dataEpil, file="C:/Users/Luismi/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.csv")
write.csv(dataEpilPlac, file="C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv")
write.csv(dataEpilPlac, file="C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv")
write.csv(dataEpilPlac, file= "C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv")
write.csv(dataEpilPlac, file= "C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv")
write.csv(dataEpilPlac, file= "C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv"
write.csv(dataEpilPlac, file= ("C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
mean(epil$age)
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
mean(epil$age)
dataEpilPlac<-subset(dataEpilmenortreinta, dataEpilmenortreinta$trt=="placebo")
table(is.null(epil))
table(is.na(epil))
write.table(dataEpil,"C:/Users/Luismi/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.txt",sep="")
write.table(dataEpil,"C:\Users\lmnie\Desktop\Bioinformática y bioestadística\Software para el análisis de datos\PEC1\dataEpil.txt",sep="")
write.table(dataEpil,"C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.txt",sep="")
dataEpil
write.csv(dataEpil, file="C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.csv")
dataEpil
dataEpil_csv<-read.csv("C:/Users/Luismi/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.csv",header=TRUE)
dataEpil_csv<-read.csv("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpil.csv",header=TRUE)
View(dataEpil_csv)
class(dataEpil$trt)
summary(dataEpil$trt)
plot(dataEpil$trt)
str(dataEpil$trt)
dataEpilmenortreinta<-subset(dataEpil, dataEpil$age<30)
View(dataEpilmenortreinta)
dataEpilPlac<-subset(dataEpilmenortreinta, dataEpilmenortreinta$trt=="placebo")
View(dataEpilPlac)
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
dataEpilPlac
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
dataEpilPlac
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= ("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
write.csv(dataEpilPlac, file= "C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/dataEpilPlac.csv")
dataEpilPlac
mean(epil$age)
epilplacebo<-subset(epil,epil$trt=="placebo")
epilplacebo
max(epilplacebo$age)
epilpro<-subset(epil,epil$trt=="progabide")
max(epilpro$age)
epilper3<-subset(epil,epil$period=="3")
epilper3plac<-subset(epilper3,epilper3$trt=="placebo")
epilper3pro<-subset(epilper3,epilper3$trt=="progabide")
mean(epilper3plac$age)
mean(epilper3pro$age)
epilmayor40<-subset(epil,epil$age>40)
epilpro
epil_mayor40_plac<-merge(epilmayor40,epilpro,all=TRUE)
summary(epil_mayor40_plac)
mean(epil$age)
epilplacebo<-subset(epil,epil$trt=="placebo")
epilplacebo
max(epilplacebo$age)
epilmayor40<-subset(epil,epil$age>40)
epilpro
epil_mayor40_plac<-merge(epilmayor40,epilpro,all=TRUE)
summary(epil_mayor40_plac)
dataCardio<-read.csv2("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Software para el análisis de datos/PEC1/cardio_train.csv", dec=".")
head(dataCardio)
View(dataCardio)
summary(dataCardio)
str(dataCardio)
dataCardiocoles1<-subset(dataCardio, dataCardio$cholesterol=="1")
dataCardiocoles2<-subset(dataCardio, dataCardio$cholesterol=="2")
dataCardiocoles3<-subset(dataCardio, dataCardio$cholesterol=="3")
View(dataCardiocoles1)
mean(dataCardiocoles1$weight)
mean(dataCardiocoles2$weight)
mean(dataCardiocoles3$weight)
hist(dataCardio$gluc)
sum(dataCardio$gender == "1")
sum(dataCardio$gender == "2")
par(mfrow=c(1,3))
hist(dataCardiocoles1$gender)
hist(dataCardiocoles2$gender)
hist(dataCardiocoles3$gender)
colesterol_generos<-data.frame(
sum(dataCardiocoles1$gender == "1"),
sum(dataCardiocoles1$gender == "2"),
sum(dataCardiocoles2$gender == "1"),
sum(dataCardiocoles2$gender == "2"),
sum(dataCardiocoles3$gender == "1"),
sum(dataCardiocoles3$gender == "2"))
str(colesterol_generos)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
qplot(dataCardio$gender, data=dataCardio)
qplot(dataCardio$cholesterol, data=dataCardio)
cor(dataCardio)
modelo<-lm(dataCardio$age~dataCardio$cholesterol, data=dataCardio)
summary(modelo)
modelo<-lm(dataCardio$weight~dataCardio$height, data=dataCardio)
plot(modelo)
plot(modelo)
qqline(modelo)
install.packages(“Rcmdr”)
install.packages(“Rcmdr”)
install.packages("Rcmdr")
install.packages("Rcmdr")
library(Rcmdr)
detach("package:Rcmdr", unload = TRUE)
library(Rcmdr)
detach("package:RcmdrMisc", unload = TRUE)
library(RcmdrMisc)
library(Rcmdr)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
tabla<-matrix(c(20,30,80,320,450,100),ncol=2)
dimnames(tabla)<-list(c("B","N","S"),c("A","NA"))
tabla
tablaconjunta<-prop.table(tabla)
tablaconjunta
tablamarginalX
tablamarginalX<-margin.table(tablaconjunta,1)
tablamarginalX
tablamarginalY<-margin.table(tablaconjunta,2)
tablamarginalY
tablacondicionada<-round(prop.table(tabla,1),2)
tablacondicionada
knitr::opts_chunk$set(echo = TRUE)
require(nortest)
require(nortest)
by(data = epil_anova,INDICES = epil_anova$trt, FUN = function(x){lillie.test(x$age)})
library(MASS)
dataepil<-MASS::epil
factor(dataepil$trt, levels = c("placebo","progabide"),labels = c(1,2))
head(dataepil$trt)
trt<-c(dataepil$trt)
age<-c(dataepil$age)
epil_anova<-data.frame(trt,age)
head(epil_anova)
table(epil_anova$trt)
aggregate(age~trt, data = epil_anova, FUN = mean)
aggregate(age~trt, data = epil_anova, FUN = sd)
boxplot(dataepil$age~dataepil$trt, data = dataepil, id.method="y")
require(nortest)
by(data = epil_anova,INDICES = epil_anova$trt, FUN = function(x){lillie.test(x$age)})
fligner.test(epil_anova$age~epil_anova$trt,epil_anova)
anova_epil<-aov(epil_anova$age~epil_anova$trt,data = epil_anova)
summary(anova_epil)
anova_epil<-aov(epil_anova$age~epil_anova$trt,data = epil_anova)
summary(anova_epil)
plot(anova_epil)
pairwise.t.test(x=epil_anova$age,g=epil_anova$trt,p.adjust.method = "holm",pool.sd = TRUE, paired = FALSE, alternative = "two.sided")
library(MASS)
library(cluster)
datosepil<-epil
d_agl<-dist(datosepil,method = "euclidean")
hc_agl<-hclust(d_agl,method = "complete")
plot(hc_agl,cex=0.6,hang=-1,main="Denograma de clúster")
hc_ag<-agnes(datosepil,method = "complete")
pltree(hc_ag,cex=0.6,hang=-1,main="Dendograma de agnes")
hc_ag$ac
hc_div<-diana(datosepil)
pltree(hc_div,cex=0.6,hang=-1,main="Dendograma de Diana")
hc_div$dc
pltree(hc_div,hang=-1,cex=0.6)
rect.hclust(hc_div,k=10,border = 2:10)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
knitr::opts_chunk$set(echo = TRUE)
Expressionset
Biobase
Biobase
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
detach("package:BiocManager", unload = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
library(Biobase)
detach("package:BiocManager", unload = TRUE)
open("Biobase")
Biobase::ExpressionSet()
install.packages("GEOquery")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
GEOquery
"GEOquery"
a<-"GEOquery"
a<-"GEOquery"
a
a<-data.frame("GEOquery")
a<-data.frame("GEOquery")
a
library(GEOquery)
library(GEOquery)
GEOquery::Accession()
getGEO(GSEMatrix=T)
getGEO(GSEMatrix = T)
library(oligo)
install.packages("oligo")
library(oligo)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("oligo")
library(oligo)
celFiles <- list.celfiles("./data", full.names = TRUE)
rawData <- read.celfiles(celFiles)
rawData <- read.celfiles(celFiles)
rawData <- read.celfiles(celFiles)
rawData <- read.celfiles(celFiles)
celFiles <- list.celfiles("./data", full.names = TRUE)
rawData <- read.celfiles(celFiles)
require(knitr)
opts_chunk$set(
concordance=FALSE, echo=TRUE,  warning=FALSE, error=FALSE, message=FALSE)
datadir <- "."
info <-readLines(file.path(datadir,"GSE58435_series_matrix.txt"), n=70)
datadir <- "."
datadir <- "."
info <-readLines(file.path(datadir,"GSE58435_series_matrix.txt"), n=70)
datadir <- "."
info <-readLines(file.path(datadir,"GSE58435_series_matrix.txt"), n=70)
require(knitr)
opts_chunk$set(
concordance=FALSE, echo=TRUE,  warning=FALSE, error=FALSE, message=FALSE)
datadir <- "."
info <-readLines(file.path(datadir,"GSE58435_series_matrix.txt"), n=70)
datadir <- "."
info <-readLines(file.path(datadir,"GSE58435_series_matrix.txt"), n=70)
require(knitr)
# include this code chunk as-is to set options
opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE,
fig.width = 7, fig.height = 7,echo = TRUE,
message = FALSE, warning = FALSE, cache=TRUE)
Sys.setlocale("LC_TIME", "C")
require(TH.data)
require(printr)
data(bodyfat, package = "TH.data")
??bodyfat
??bodyfat
head(bodyfat)
str(teengamb)
str(bodyfat)
apply(bodyfat, 2, class)
require(ggplot2)
require(GGally)
ggpairs(bodyfat)
require(compareGroups)
res <- compareGroups(~., data = bodyfat)
restab <- createTable(res)
restab
require(compareGroups)
res <- compareGroups(~., data = bodyfat)
restab <- createTable(res)
restab
par(mfrow = c(3,2))
for (i in 1:dim(bodyfat)[2]) {
if (class(bodyfat[,i]) == "factor")
{try(plot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}else
{try(boxplot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}
}
require(compareGroups)
res <- compareGroups(~., data = bodyfat)
restab <- createTable(res)
restab
par(mfrow = c(5,2))
for (i in 1:dim(bodyfat)[2]) {
if (class(bodyfat[,i]) == "factor")
{try(plot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}else
{try(boxplot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}
}
require(compareGroups)
res <- compareGroups(~., data = bodyfat)
restab <- createTable(res)
restab
par(mfrow = c(3,2))
for (i in 1:dim(bodyfat)[2]) {
if (class(bodyfat[,i]) == "factor")
{try(plot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}else
{try(boxplot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}
}
require(compareGroups)
res <- compareGroups(~., data = bodyfat)
restab <- createTable(res)
restab
par(mfrow = c(2,2))
for (i in 1:dim(bodyfat)[2]) {
if (class(bodyfat[,i]) == "factor")
{try(plot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}else
{try(boxplot(bodyfat[,i],main = colnames(bodyfat)[i]),TRUE)
}
}
require(ggplot2)
require(GGally)
ggpairs(bodyfat)
require(ggplot2)
require(GGally)
ggpairs(teengamb)
setwd("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Análisis de Datos Ómicos/PEC 1/MicroarraysAnalysis")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
workingDir <-getwd()
dataDir <- file.path(workingDir, "data")
resultsDir <- file.path(workingDir, "results")
workingDir <-getwd()
dataDir <- file.path(workingDir, "datal")
resultsDir <- file.path(workingDir, "results")
workingDir <-getwd()
dataDir <- file.path(workingDir, "data")
resultsDir <- file.path(workingDir, "results")
library(pd.mogene.1.0.st.v1)
library(mogene10sttranscriptcluster.db)
library(oligo)
library(limma)
library(Biobase)
library(arrayQualityMetrics)
library(genefilter)
library(annotate)
library(xtable)
library(gplots)
library(GOstats)
library(Biobase)
#TARGETS
targetsDF <-read.csv(file=file.path(dataDir,"targets_PEC1.csv"), header = TRUE, sep=";")
#DEFINE SOME VARIABLES FOR PLOTS
sampleNames <- as.character(targetsDF$ShortName)
sampleColor <- as.character(targetsDF$Colors)
# Creamos un objeto AnnotatedDataFrame
targets <- AnnotatedDataFrame(targetsDF)
View(targets)
library(oligo)
CELfiles <- targetsDF$fileName
rawData <- read.celfiles(file.path(dataDir,CELfiles), phenoData=targets)
library(oligo)
CELfiles <- targetsDF$FileName
rawData <- read.celfiles(file.path(dataDir,CELfiles), phenoData=targets)
dataDir <- file.path(workingDir, "data")
CELfiles <- targetsDF$FileName
rawData <- read.celfiles(file.path(dataDir,CELfiles), phenoData=targets)
setwd("C:/Users/lmnie/Desktop/Bioinformática y bioestadística/Análisis de Datos Ómicos/PEC 1/MicroarraysAnalysis")
dataDir <- file.path(workingDir, "data")
resultsDir <- file.path(workingDir, "results")
rawData <- read.celfiles(file.path(dataDir,CELfiles), phenoData=targets)
rawData <- read.celfiles(file.path(data(),CELfiles), phenoData=targets)
rawData <- read.celfiles(file.path(data,CELfiles), phenoData=targets)
rawData <- read.celfiles(file.path(data,CELfiles), phenoData=targets)
library(base)
CELfiles <- targetsDF$FileName
rawData <- read.celfiles(file.path(data,CELfiles), phenoData=targets)
rawData
rawData <- read.celfiles(file.path(data,CELfiles), phenoData=targets)
